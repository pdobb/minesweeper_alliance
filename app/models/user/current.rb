# frozen_string_literal: true

# User::Current is responsible for look-up/creation of {User} records.
# - Lookup is performed via the "User Token" stored in
#   `cookies.signed[User::Current::COOKIE]`.
# - Creation of a new {User} record generates a "User Token", which is actually
#   just the GUID generated by the DB ({User#id}). Which is then "permanently"
#   stored into `cookies.signed[User::Current::COOKIE]` for future lookup.
class User::Current
  COOKIE = "user_token-v2"

  include CallMethodBehaviors

  def initialize(context:)
    @context = context
  end

  def call
    MigrateFromOldUserTokenCookie.(context:)

    if stored_user_token?
      find || create
    else
      create
    end
  end

  private

  attr_reader :context

  def cookies = context.cookies

  def find
    User.for_id(stored_user_token).take.tap { |user|
      # TODO: Remove when site != beta.
      BackfillRequestData.(user:, context:) if user
    }
  end

  def stored_user_token? = stored_user_token.present?
  def stored_user_token = @stored_user_token ||= cookies.signed[COOKIE]

  def create
    User.create(user_agent:).tap { |new_user|
      store_user_token(value: new_user.token)
    }
  end

  def user_agent = context.user_agent

  def store_user_token(value:)
    context.store_signed_cookie(COOKIE, value:)
  end

  # User::Current::MigrateFromOldUserTokenCookie migrates old users over from
  # the "user_token" cookie to the new "user_token-v2" cookie for identifying
  # the current {User}. Really old users will have an unsigned cookie.
  class MigrateFromOldUserTokenCookie
    OLD_COOKIE = "user_token"

    include CallMethodBehaviors

    def initialize(context:)
      @context = context
    end

    # :reek:TooManyStatements
    def call
      return if new_user_token?
      return unless old_user_token?

      user_token = old_user_token
      store_new_signed_cookie(value: user_token)
      delete_old_cookie
    end

    private

    def new_user_token? = cookies.signed[COOKIE].present?
    def old_user_token? = old_user_token.present?

    def old_user_token
      @old_user_token ||= cookies.signed[OLD_COOKIE] || cookies[OLD_COOKIE]
    end

    def store_new_signed_cookie(value:)
      context.store_signed_cookie(COOKIE, value:)
    end

    def delete_old_cookie
      cookies.delete(OLD_COOKIE)
    end

    attr_reader :context

    def cookies = context.cookies
  end

  # User::Current::BackfillRequestData is a temporary service object
  # for backfilling request data into existing {User}s, as they come back to
  # visit the site.
  #
  # TODO: Remove when site != beta.
  class BackfillRequestData
    include CallMethodBehaviors

    def initialize(user:, context:)
      @user = user
      @context = context
    end

    # :reek:TooManyStatements
    def call
      return if user.user_agent?

      user.update(user_agent:)
    end

    private

    attr_reader :user,
                :context

    def user_agent = context.user_agent
  end
end
